{
	"sqrt": {
		"Name": "Square Root",
		"Address": "fable.Math.sqrtPrecise"
	},

	"percent": {
		"Name": "Compute Percent (in IS over OF format)",
		"Address": "fable.Math.percentagePrecise"
	},

	"compare": {
		"Name": "Compare",
		"Address": "fable.Math.comparePrecise"
	},

	"abs": {
		"Name": "Absolute Value",
		"Address": "fable.Math.absPrecise"
	},
	"floor": {
		"Name": "Floor Value",
		"Address": "fable.Math.floorPrecise"
	},
	"ceil": {
		"Name": "Ceiling Value",
		"Address": "fable.Math.ceilPrecise"
	},

	"rad": {
		"Name": "Degrees to Radians",
		"Address": "fable.Math.radPrecise"
	},

	"pi": {
		"Name": "Pi",
		"Address": "fable.Math.piPrecise"
	},
	"euler": {
		"Name": "Euler",
		"Address": "fable.Math.eulerPrecise"
	},

	"sin": {
		"Name": "Sine",
		"Address": "fable.Math.sin"
	},
	"cos": {
		"Name": "Cosine",
		"Address": "fable.Math.cos"
	},
	"tan": {
		"Name": "Tangent",
		"Address": "fable.Math.tan"
	},

	"count": {
		"Name": "Count Set Elements",
		"Address": "fable.Math.countSetElements"
	},
	"countset": {
		"Name": "Count Set Elements",
		"Address": "fable.Math.countSetElements"
	},
	"sortset": {
		"Name": "Sort Set",
		"Address": "fable.Math.sortSetPrecise"
	},
	"bucketset": {
		"Name": "Bucket Set",
		"Address": "fable.Math.bucketSetPrecise"
	},
	"sorthistogram": {
		"Name": "Sort Histogram",
		"Address": "fable.Math.sortHistogramPrecise"
	},

	"max": {
		"Name": "Maximum",
		"Address": "fable.Math.maxPrecise"
	},
	"min": {
		"Name": "Minimum",
		"Address": "fable.Math.minPrecise"
	},

	"sum": {
		"Name": "Sum",
		"Address": "fable.Math.sumPrecise"
	},

	"avg": {
		"Name": "Average",
		"Address": "fable.Math.averagePrecise"
	},
	"mean": {
		"Name": "Mean",
		"Address": "fable.Math.meanPrecise"
	},
	"median": {
		"Name": "Median",
		"Address": "fable.Math.medianPrecise"
	},
	"mode": {
		"Name": "Mode",
		"Address": "fable.Math.modePrecise"
	},
	"round": {
		"Name": "Round",
		"Address": "fable.Math.roundPrecise"
	},
	"tofixed": {
		"Name": "To Fixed",
		"Address": "fable.Math.toFixedPrecise"
	},

	"cumulativesummation": {
		"Name": "Count Set Elements in a Histogram or Value Map",
		"Address": "fable.Math.cumulativeSummation"
	},

	"countsetelements": {
		"Name": "Count Set Elements in a Histogram or Value Map",
		"Address": "fable.Math.countSetElements"
	},

	"getvalue": {
		"Name": "Get Value from Application State or Services (AppData, etc.)",
		"Address": "fable.Utility.getInternalValueByHash"
	},

	"flatten": {
		"Name": "flatten an array of values",
		"Address": "fable.Utility.flattenArrayOfSolverInputs"
	},

	"findfirstvaluebyexactmatch": {
		"Name": "find + map on array of objects",
		"Address": "fable.Utility.findFirstValueByExactMatchInternal"
	},

	"findfirstvaluebystringincludes": {
		"Name": "find + map on array of objects",
		"Address": "fable.Utility.findFirstValueByStringIncludesInternal"
	},

	"resolvehtmlentities": {
		"Name": "resolve HTML entities",
		"Address": "fable.DataFormat.resolveHtmlEntities"
	},

	"concat": {
		"Name": "concatenate an array of values and output a string",
		"Address": "fable.DataFormat.concatenateStringsInternal"
	},

	"concatraw": {
		"Name": "concatenate an array of values and output a string",
		"Address": "fable.DataFormat.concatenateStringsRawInternal"
	},

	"join": {
		"Name": "join an array of values and output a string",
		"Address": "fable.DataFormat.joinStringsInternal"
	},

	"joinraw": {
		"Name": "join an array of values and output a string",
		"Address": "fable.DataFormat.joinStringsRawInternal"
	},

	"if": {
		"Name": "perform a conditional operator on two values, and choose one of two outcomes based on the result",
		"Address": "fable.Logic.checkIf"
	},

	"when": {
		"Name": "perform a 'truthy' check on one value, and return one of two outcomes based on the result",
		"Address": "fable.Logic.when"
	},

	"entryinset": {
		"Name": "Entry in Set",
		"Address": "fable.Math.entryInSet"
	},
	"smallestinset": {
		"Name": "Smallest in Set",
		"Address": "fable.Math.smallestInSet"
	},
	"largestinset": {
		"Name": "Largest in Set",
		"Address": "fable.Math.largestInSet"
	},

	"aggregationhistogram": {
		"Name": "Generate a Histogram by Exact Value Aggregation",
		"Address": "fable.Math.histogramAggregationByExactValueFromInternalState"
	},
	"distributionhistogram": {
		"Name": "Generate a Histogram Based on Value Distribution",
		"Address": "fable.Math.histogramDistributionByExactValueFromInternalState"
	},

	"setconcatenate": {
		"Name": "Set Concatenate",
		"Address": "fable.Math.setConcatenate"
	},

	"getvaluearray": {
		"Name": "Get Value Array from Application State or Services (AppData, etc.)",
		"Address": "fable.Utility.createValueArrayByHashParametersFromInternal"
	},
	"getvalueobject": {
		"Name": "Get Value Object from Application State or Services (AppData, etc.)",
		"Address": "fable.Utility.createValueObjectByHashParametersFromInternal"
	},

	"cleanvaluearray": {
		"Name": "Clean Value Array",
		"Address": "fable.Math.cleanValueArray"
	},
	"cleanvalueobject": {
		"Name": "Clean Value Object",
		"Address": "fable.Math.cleanValueObject"
	},

	"randominteger": {
		"Name": "Random Integer",
		"Address": "fable.DataGeneration.randomInteger"
	},
	"randomintegerbetween": {
		"Name": "Random Integer Between Two Numbers",
		"Address": "fable.DataGeneration.randomIntegerBetween"
	},
	"randomintegerupto": {
		"Name": "Random Integer",
		"Address": "fable.DataGeneration.randomIntegerUpTo"
	},
	"randomfloat": {
		"Name": "Random Float",
		"Address": "fable.DataGeneration.randomFloat"
	},
	"randomfloatbetween": {
		"Name": "Random Float",
		"Address": "fable.DataGeneration.randomFloatBetween"
	},
	"randomfloatupto": {
		"Name": "Random Float",
		"Address": "fable.DataGeneration.randomFloatUpTo"
	},

	"datedaydifference": {
		"Name": "Date Difference in Days",
		"Address": "fable.Dates.dateDayDifference"
	},
	"dateweekdifference": {
		"Name": "Date Difference in Weeks",
		"Address": "fable.Dates.dateWeekDifference"
	},
	"datemonthdifference": {
		"Name": "Date Difference in Months",
		"Address": "fable.Dates.dateMonthDifference"
	},
	"dateyeardifference": {
		"Name": "Date Difference in Years",
		"Address": "fable.Dates.dateYearDifference"
	},

	"createValueObjectByHashes": {
		"Name": "Create Value Object by Hashes",
		"Address": "fable.Utility.createValueObjectByHashes"
	}
}
